{
    "project": {
        "name": "TaskGroup API",
        "description": "Technical API documentation for Bevry's TaskGroup flow control library.",
        "version": "5.0.0",
        "url": "https://github.com/bevry/taskgroup",
        "logo": "http://localhost:8000/web/logo.svg"
    },
    "files": {
        "es6/lib/taskgroup.js": {
            "name": "es6/lib/taskgroup.js",
            "modules": {},
            "classes": {
                "BaseEventEmitter": 1,
                "Task": 1,
                "TaskGroup": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "BaseEventEmitter": {
            "name": "BaseEventEmitter",
            "shortname": "BaseEventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "es6/lib/taskgroup.js",
            "line": 73,
            "description": "Base class containing common functionality for {{#crossLink \"Task\"}}{{/crossLink}} and {{#crossLink \"TaskGroup\"}}{{/crossLink}}.",
            "extends": "EventEmitter",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Task": {
            "name": "Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "es6/lib/taskgroup.js",
            "line": 273,
            "description": "Our Task Class\n\nAvailable configuration is documented in {{#crossLink \"Task/setConfig\"}}{{/crossLink}}.\n\nAvailable events:\n\n- `started()` - emitted when we start execution\n- `running()` - emitted when the method starts execution\n- `failed(error)` - emitted when execution exited with a failure\n- `passed()` - emitted when execution exited with a success\n- `completed(error, ...resultArguments)` - emitted when execution exited, `resultArguments` are the result arguments from the method\n- `error(error)` - emtited if an unexpected error occurs without ourself\n- `done(error, ...resultArguments)` - emitted when either execution completes (the `completed` event) or when an unexpected error occurs (the `error` event)\n\nAvailable internal statuses:\n\n- `null` - execution has not yet started\n- `'started'` - execution has begun\n- `'running'` - execution of our method has begun\n- `'failed'` - execution of our method has failed\n- `'passed'` - execution of our method has succeeded\n- `'destroyed'` - we've been destroyed and can no longer execute\n\nExample:\n\n``` javascript\nvar Task = require('taskgroup').Task\nvar task\n\ntask = new Task('my synchronous task', function(){\n\treturn 5\n}).done(console.info).run()  // [null, 5]\n\ntask = new Task('my asynchronous task', function(complete){\n\tcomplete(null, 5)\n}).done(console.info).run()  // [null, 5]\n\ntask = new Task('my task that returns an error', function(){\n\tvar error = new Error('deliberate error')\n\treturn error\n}).done(console.info).run()  // [Error('deliberator error')]\n\ntask = new Task('my task that passes an error', function(complete){\n\tvar error = new Error('deliberate error')\n\tcomplete(error)\n}).done(console.info).run()  // [Error('deliberator error')]\n```",
            "extends": "BaseEventEmitter",
            "is_constructor": 1,
            "access": "public",
            "tagname": ""
        },
        "TaskGroup": {
            "name": "TaskGroup",
            "shortname": "TaskGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "es6/lib/taskgroup.js",
            "line": 888,
            "description": "Our TaskGroup class.\n\nAvailable configuration is documented in {{#crossLink \"TaskGroup/setConfig\"}}{{/crossLink}}.\n\nAvailable events:\n\n- `started()` - emitted when we start execution\n- `running()` - emitted when the first item starts execution\n- `failed(error)` - emitted when execution exited with a failure\n- `passed()` - emitted when execution exited with a success\n- `completed(error, results)` - emitted when execution exited, `results` is an {Array} of the result arguments for each item that executed\n- `error(error)` - emtited if an unexpected error occured within ourself\n- `done(error, results)` - emitted when either the execution completes (the `completed` event) or when an unexpected error occurs (the `error` event)\n- `item.*(...)` - bubbled events from an added item\n- `task.*(...)` - bubbled events from an added {Task}\n- `group.*(...)` - bubbled events from an added {TaskGroup}\n\nAvailable internal statuses:\n\n- `null` - execution has not yet started\n- `'started'` - execution has begun\n- `'running'` - execution of items has begun\n- `'failed'` - execution has exited with failure status\n- `'passed'` - execution has exited with success status\n- `'destroyed'` - we've been destroyed and can no longer execute",
            "is_constructor": 1,
            "extends": "BaseEventEmitter",
            "access": "public",
            "tagname": ""
        }
    },
    "classitems": [
        {
            "file": "es6/lib/taskgroup.js",
            "line": 82,
            "description": "A helper method to create a new subclass with our extensions.",
            "params": [
                {
                    "name": "extensions",
                    "description": "- The methods and properties to use.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new instance of the sub class.",
                "type": "Object"
            },
            "static": 1,
            "itemtype": "method",
            "name": "subclass",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 95,
            "description": "Creates a new {SubClass} instance.",
            "params": [
                {
                    "name": "args",
                    "description": "- The arguments to be forwarded along to the constructor.",
                    "type": "Arguments"
                }
            ],
            "return": {
                "description": "The new instance.",
                "type": "SubClass"
            },
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 108,
            "description": "BaseEventEmitter Constructor\n\nAdds support for the done event while\nensuring that errors are always handled correctly.\nIt does this by listening to the `error` and `completed` events,\nand when the emit, we check if there is a `done` listener:\n\n- if there is, then emit the done event with the original event arguments\n- if there isn't, then output the error to stderr and throw it.",
            "itemtype": "method",
            "name": "constructor",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 157,
            "description": "Fire our completion event.",
            "chainable": 1,
            "itemtype": "method",
            "name": "complete",
            "access": "private",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 169,
            "description": "Attaches the listener to the `done` event to be emitted each time.",
            "params": [
                {
                    "name": "listener",
                    "description": "- Attaches to the `done` event.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "whenDone",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 186,
            "description": "Attaches the listener to the `done` event to be emitted only once, then removed to not fire again.",
            "params": [
                {
                    "name": "listener",
                    "description": "- Attaches to the `done` event.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "onceDone",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 203,
            "description": "Alias for {{#crossLink \"BaseEventEmitter/onceDone\"}}{{/crossLink}}",
            "params": [
                {
                    "name": "listener",
                    "description": "- Attaches to the `done` event.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "done",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 214,
            "description": "Gets our name prepended by all of our parents names",
            "type": "Array",
            "itemtype": "property",
            "name": "namesArray",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 230,
            "description": "Gets our name prefixed by all of our parents names",
            "type": "String",
            "itemtype": "property",
            "name": "names",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 241,
            "description": "Get the name of our instance.\nIf the name was never configured, then return the name in the format of `'#{this.type} #{Math.random()}'` to output something like `task 0.2123`",
            "type": "String",
            "itemtype": "property",
            "name": "name",
            "access": "public",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 252,
            "description": "Executes the passed function either synchronously if `config.sync` is `true` or delays it for the next tick.",
            "params": [
                {
                    "name": "fn",
                    "description": "- The function to execute",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "queue",
            "access": "private",
            "tagname": "",
            "class": "BaseEventEmitter"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 328,
            "description": "The type of our class.\n\nUsed for the purpose of duck typing\nwhich is needed when working with node virtual machines\nas instanceof will not work in those environments.",
            "type": "String",
            "itemtype": "property",
            "name": "type",
            "default": "'task'",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 342,
            "description": "A helper method to check if the passed argument is an instanceof a {Task}.",
            "params": [
                {
                    "name": "item",
                    "description": "- The possible instance of the {Task} that we want to check",
                    "type": "Task"
                }
            ],
            "return": {
                "description": "Whether or not the item is a {Task} instance.",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isTask",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 354,
            "description": "Have we started execution yet?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "started",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 364,
            "description": "Have we finished its execution yet?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "exited",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 381,
            "description": "Have we been destroyed?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "destroyed",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 391,
            "description": "Have we completed its execution yet?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "completed",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 412,
            "description": "The first {Error} that has occured.",
            "type": "Error",
            "itemtype": "property",
            "name": "error",
            "access": "protected",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 420,
            "description": "A {String} containing our current status. See our {Task} description for available values.",
            "type": "String",
            "itemtype": "property",
            "name": "status",
            "access": "protected",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 428,
            "description": "An {Array} of the events that we may emit. Events that will be executed can be found in the {Task} description.",
            "type": "Array",
            "itemtype": "property",
            "name": "events",
            "default": "['events', 'error', 'started', 'running', 'failed', 'passed', 'completed', 'done', 'destroyed']",
            "access": "protected",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 437,
            "description": "An {Array} representing the returned result or the passed {Arguments} of our method.\nThe first item in the array should be the {Error} if it exists.",
            "type": "Array",
            "itemtype": "property",
            "name": "result",
            "access": "protected",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 446,
            "description": "The {Domain} that we create to capture errors for our method.",
            "type": "Domain",
            "itemtype": "property",
            "name": "taskDomain",
            "access": "protected",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 454,
            "description": "Initialize our new {Task} instance. Forwards arguments onto {{#crossLink \"Task/setConfig\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "constructor",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 484,
            "description": "Set the configuration for our instance.",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "name",
                            "description": "- What we would like our name to be, useful for debugging.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "done",
                            "description": "- Passed to {{#crossLink \"Task/onceDone\"}}{{/crossLink}} (aliases are `onceDone`, and `next`)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "whenDone",
                            "description": "- Passed to {{#crossLink \"Task/whenDone\"}}{{/crossLink}}",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "on",
                            "description": "- A map of event names linking to listener functions that we would like bounded via {EventEmitter.on}.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "once",
                            "description": "- A map of event names linking to listener functions that we would like bounded via {EventEmitter.once}.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "- A parent {{#crossLink \"TaskGroup\"}}{{/crossLink}} that we may be attached to.",
                            "type": "TaskGroup",
                            "optional": true
                        },
                        {
                            "name": "onError",
                            "description": "- Either `'exit'` or `'ignore'`, when `'ignore'` duplicate run errors are not reported, useful when combined with the timeout option.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "- Whether or not we should execute certain calls asynchronously (set to `false`) or synchronously (set to `true`).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "method",
                            "description": "- The {Function} to execute for our {Task}.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "args",
                            "description": "- Arguments that we would like to forward onto our method when we execute it.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "- Millesconds that we would like to wait before timing out the method.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ambi",
                            "description": "- Whether or not to use bevry/ambi to determine if the method is asynchronous or synchronous and execute it appropriately.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "domain",
                            "description": "- Whether or not to wrap the task execution in a domain to attempt to catch background errors (aka errors that are occuring in other ticks than the initial execution).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setConfig",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 567,
            "description": "Handles the completion and error conditions for ourself.\nShould only ever execute once, if it executes more than once, then we error.",
            "params": [
                {
                    "name": "args",
                    "description": "- The arguments that will be applied to the {::result} variable. First argument is the {Error} if it exists.",
                    "type": "Arguments"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "exit",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 614,
            "description": "Completetion Emitter. Used to emit the `completed` event and to cleanup our state.",
            "chainable": 1,
            "itemtype": "method",
            "name": "complete",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 644,
            "description": "When Done Promise.\nFires the listener, either on the next tick if we are already done, or if not, each time the `done` event fires.",
            "params": [
                {
                    "name": "listener",
                    "description": "- The {Function} to attach or execute.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "whenDone",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 668,
            "description": "Once Done Promise.\nFires the listener once, either on the next tick if we are already done, or if not, each time the `done` event fires.",
            "params": [
                {
                    "name": "listener",
                    "description": "- The {Function} to attach or execute.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "onceDone",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 692,
            "description": "Reset the results.\nAt this point this method is internal, as it's functionality may change in the future, and it's outside use is not yet confirmed. If you need such an ability, let us know via the issue tracker.",
            "chainable": 1,
            "itemtype": "method",
            "name": "resetResults",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 704,
            "description": "Clear the domain",
            "chainable": 1,
            "itemtype": "method",
            "name": "clearDomain",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 720,
            "description": "Destroy the task and prevent it from executing ever again.",
            "chainable": 1,
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 754,
            "description": "Fire the task method with our config arguments and wrapped in a domain.",
            "chainable": 1,
            "itemtype": "method",
            "name": "fire",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 852,
            "description": "Start the execution of the task.\nWill emit an `error` event if the task has already started before.",
            "chainable": 1,
            "itemtype": "method",
            "name": "run",
            "access": "public",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 921,
            "description": "The type of our class.\n\nUsed for the purpose of duck typing\nwhich is needed when working with node virtual machines\nas instanceof will not work in those environments.",
            "type": "String",
            "itemtype": "property",
            "name": "type",
            "default": "'taskgroup'",
            "access": "private",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 935,
            "description": "A helper method to check if the passed argument is an instanceof a {TaskGroup}.",
            "params": [
                {
                    "name": "item",
                    "description": "- The possible instance of the {TaskGroup} that we want to check",
                    "type": "TaskGroup"
                }
            ],
            "return": {
                "description": "Whether or not the item is a {TaskGroup} instance.",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isTaskGroup",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 947,
            "description": "A reference to the {Task} class for use in {::createTask} if we want to override it.",
            "type": "Task",
            "itemtype": "property",
            "name": "Task",
            "default": "Task",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 956,
            "description": "A reference to the {TaskGroup} class for use in {::createGroup} if we want to override it.",
            "type": "TaskGroup",
            "itemtype": "property",
            "name": "TaskGroup",
            "default": "TaskGroup",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 968,
            "description": "A reference to the {Task} class.",
            "type": "Task",
            "itemtype": "property",
            "name": "Task",
            "default": "Task",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 978,
            "description": "A reference to the {TaskGroup} class.",
            "type": "TaskGroup",
            "itemtype": "property",
            "name": "TaskGroup",
            "default": "TaskGroup",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 992,
            "description": "The {config.concurrency} property.",
            "type": "Number",
            "itemtype": "property",
            "name": "concurrency",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1000,
            "description": "The first {Error} that has occured.",
            "type": "Error",
            "itemtype": "property",
            "name": "error",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1008,
            "description": "A {String} containing our current status. See our {TaskGroup} description for available values.",
            "type": "String",
            "itemtype": "property",
            "name": "status",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1016,
            "description": "An {Array} of the events that we may emit. Events that will be executed can be found in the {Task} description.",
            "type": "Array",
            "itemtype": "property",
            "name": "events",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1024,
            "description": "An {Array} that contains the result property for each completed {Task} and {TaskGroup}.\nAn item can disable having its result property added to this results array by setting its {includeInResults} configuration option to `false`.",
            "type": "Array",
            "itemtype": "property",
            "name": "results",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1033,
            "description": "An {Array} of each {Task} and {TaskGroup} in this group that are still yet to execute.",
            "type": "Array",
            "itemtype": "property",
            "name": "itemsRemaining",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1041,
            "description": "An {Array} of each {Task} and {TaskGroup} in this group that are currently executing.",
            "todo": [
                "offer the ability to disable this completely via `storeRunningItems: false`"
            ],
            "type": "Array",
            "itemtype": "property",
            "name": "itemsRunning",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1050,
            "description": "An {Array} of each {Task} and {TaskGroup} in this group that have completed.",
            "todo": [
                "offer the ability to disable this completely via `storeCompletedItems: false`"
            ],
            "type": "Array",
            "itemtype": "property",
            "name": "itemsRunning",
            "access": "protected",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1059,
            "description": "Initialize our new {TaskGroup} instance. Forwards arguments onto {{#crossLink \"TaskGroup/setConfig\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "constructor",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1109,
            "description": "Merged passed configuration into {config.nestedTaskConfig}.",
            "type": "Object",
            "itemtype": "property",
            "name": "nestedTaskConfig",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup",
            "subprops": [
                {
                    "name": "opts",
                    "description": "- The configuration to merge.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1124,
            "description": "Merged passed configuration into {config.nestedGroupConfig}.",
            "type": "Object",
            "itemtype": "property",
            "name": "nestedGroupConfig",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup",
            "subprops": [
                {
                    "name": "opts",
                    "description": "- The configuration to merge.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1139,
            "description": "Set the configuration for our instance.\n\nDespite accepting an {Object} of configuration, we can also accept an {Array} of configuration.\tWhen using an array, a {String} becomes the :name, a {Function} becomes the :method, and an {Object} becomes the :config",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "name",
                            "description": "- What we would like our name to be, useful for debugging.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "done",
                            "description": "- Passed to {{#crossLink \"TaskGroup/onceDone\"}}{{/crossLink}} (aliases are `onceDone`, and `next`)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "whenDone",
                            "description": "- Passed to {{#crossLink \"TaskGroup/whenDone\"}}{{/crossLink}}",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "on",
                            "description": "- A map of event names linking to listener functions that we would like bounded via {EventEmitter.on}.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "once",
                            "description": "- A map of event names linking to listener functions that we would like bounded via {EventEmitter.once}.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "- A parent {{#crossLink \"TaskGroup\"}}{{/crossLink}} that we may be attached to.",
                            "type": "TaskGroup",
                            "optional": true
                        },
                        {
                            "name": "onError",
                            "description": "- Either `'exit'` or `'ignore'`, when `'ignore'` duplicate run errors are not reported, useful when combined with the timeout option.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "- Whether or not we should execute certain calls asynchronously (set to `false`) or synchronously (set to `true`).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "method",
                            "description": "- The {Function} to execute for our {TaskGroup} when using inline execution style.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "run",
                            "description": "- A {Boolean} for whether or not to the :method (if specified) automatically.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "concurrency",
                            "description": "- The amount of items that we would like to execute at the same time. Use `0` for unlimited. `1` accomplishes serial execution, everything else accomplishes parallel execution.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "nestedGroupConfig",
                            "description": "- The nested configuration to be applied to all {TaskGroup} descendants of this group.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "nestedTaskConfig",
                            "description": "- The nested configuration to be applied to all {Task} descendants of this group.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "tasks",
                            "description": "- An {Array} of {Task} instances to be added to this group.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "groups",
                            "description": "- An {Array} of {TaskGroup} instances to be added to this group.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "items",
                            "description": "- An {Array} of {Task} and/or {TaskGroup} instances to be added to this group.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setConfig",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1246,
            "description": "Prepare the method and it's configuration, and add it as a task to be executed.",
            "params": [
                {
                    "name": "method",
                    "description": "- The function we want to execute as the method of this TaskGroup.",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "- Optional configuration for the task to be created for the method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The task for the method.",
                "type": "Task"
            },
            "itemtype": "method",
            "name": "addMethod",
            "access": "private",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 1263,
            "description": "Autorun ourself under certain conditions.\n\nThose conditions being:\n\n- if we the :method configuration is defined, and we have no :parent\n- if we the :run configuration is `true`\n\nUsed primarily to cause the :method to fire at the appropriate time when using inline style.",
            "chainable": 1,
            "itemtype": "method",
            "name": "autoRun",
            "access": "private",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "es6/lib/taskgroup.js",
            "line": 2005,
            "description": "Start/restart/resume the execution of the TaskGroup.",
            "chainable": 1,
            "itemtype": "method",
            "name": "run",
            "access": "public",
            "tagname": "",
            "class": "TaskGroup"
        }
    ],
    "warnings": []
}